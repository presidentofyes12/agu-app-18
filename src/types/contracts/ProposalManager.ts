/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ProposalManagerInterface extends utils.Interface {
  functions: {
    "cancelProposal(uint256)": FunctionFragment;
    "castVote(uint256,bool)": FunctionFragment;
    "createProposal(string,string,uint8)": FunctionFragment;
    "executeProposal(uint256)": FunctionFragment;
    "getProposal(uint256)": FunctionFragment;
    "proposalCount()": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelProposal"
      | "castVote"
      | "createProposal"
      | "executeProposal"
      | "getProposal"
      | "proposalCount"
      | "proposals"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "createProposal",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;

  events: {
    "ProposalCanceled(uint256)": EventFragment;
    "ProposalCreated(uint256,address,uint256,uint256)": EventFragment;
    "ProposalExecuted(uint256)": EventFragment;
    "VoteCast(uint256,address,bool,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProposalCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCast"): EventFragment;
}

export interface ProposalCanceledEventObject {
  proposalId: BigNumber;
}
export type ProposalCanceledEvent = TypedEvent<
  [BigNumber],
  ProposalCanceledEventObject
>;

export type ProposalCanceledEventFilter =
  TypedEventFilter<ProposalCanceledEvent>;

export interface ProposalCreatedEventObject {
  proposalId: BigNumber;
  creator: string;
  startEpoch: BigNumber;
  endEpoch: BigNumber;
}
export type ProposalCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  ProposalCreatedEventObject
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export interface ProposalExecutedEventObject {
  proposalId: BigNumber;
}
export type ProposalExecutedEvent = TypedEvent<
  [BigNumber],
  ProposalExecutedEventObject
>;

export type ProposalExecutedEventFilter =
  TypedEventFilter<ProposalExecutedEvent>;

export interface VoteCastEventObject {
  proposalId: BigNumber;
  voter: string;
  support: boolean;
  votes: BigNumber;
}
export type VoteCastEvent = TypedEvent<
  [BigNumber, string, boolean, BigNumber],
  VoteCastEventObject
>;

export type VoteCastEventFilter = TypedEventFilter<VoteCastEvent>;

export interface ProposalManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProposalManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createProposal(
      title: string,
      description: string,
      category: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    executeProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        boolean,
        boolean
      ] & {
        title: string;
        description: string;
        category: number;
        startEpoch: BigNumber;
        endEpoch: BigNumber;
        forVotes: BigNumber;
        againstVotes: BigNumber;
        quorum: BigNumber;
        creator: string;
        executed: boolean;
        canceled: boolean;
      }
    >;

    proposalCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        boolean,
        boolean
      ] & {
        title: string;
        description: string;
        category: number;
        startEpoch: BigNumber;
        endEpoch: BigNumber;
        forVotes: BigNumber;
        againstVotes: BigNumber;
        quorum: BigNumber;
        creator: string;
        executed: boolean;
        canceled: boolean;
      }
    >;
  };

  cancelProposal(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  castVote(
    proposalId: BigNumberish,
    support: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createProposal(
    title: string,
    description: string,
    category: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  executeProposal(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getProposal(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      boolean,
      boolean
    ] & {
      title: string;
      description: string;
      category: number;
      startEpoch: BigNumber;
      endEpoch: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      quorum: BigNumber;
      creator: string;
      executed: boolean;
      canceled: boolean;
    }
  >;

  proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      boolean,
      boolean
    ] & {
      title: string;
      description: string;
      category: number;
      startEpoch: BigNumber;
      endEpoch: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      quorum: BigNumber;
      creator: string;
      executed: boolean;
      canceled: boolean;
    }
  >;

  callStatic: {
    cancelProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    createProposal(
      title: string,
      description: string,
      category: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        boolean,
        boolean
      ] & {
        title: string;
        description: string;
        category: number;
        startEpoch: BigNumber;
        endEpoch: BigNumber;
        forVotes: BigNumber;
        againstVotes: BigNumber;
        quorum: BigNumber;
        creator: string;
        executed: boolean;
        canceled: boolean;
      }
    >;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        boolean,
        boolean
      ] & {
        title: string;
        description: string;
        category: number;
        startEpoch: BigNumber;
        endEpoch: BigNumber;
        forVotes: BigNumber;
        againstVotes: BigNumber;
        quorum: BigNumber;
        creator: string;
        executed: boolean;
        canceled: boolean;
      }
    >;
  };

  filters: {
    "ProposalCanceled(uint256)"(
      proposalId?: BigNumberish | null
    ): ProposalCanceledEventFilter;
    ProposalCanceled(
      proposalId?: BigNumberish | null
    ): ProposalCanceledEventFilter;

    "ProposalCreated(uint256,address,uint256,uint256)"(
      proposalId?: BigNumberish | null,
      creator?: string | null,
      startEpoch?: null,
      endEpoch?: null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      proposalId?: BigNumberish | null,
      creator?: string | null,
      startEpoch?: null,
      endEpoch?: null
    ): ProposalCreatedEventFilter;

    "ProposalExecuted(uint256)"(
      proposalId?: BigNumberish | null
    ): ProposalExecutedEventFilter;
    ProposalExecuted(
      proposalId?: BigNumberish | null
    ): ProposalExecutedEventFilter;

    "VoteCast(uint256,address,bool,uint256)"(
      proposalId?: BigNumberish | null,
      voter?: string | null,
      support?: null,
      votes?: null
    ): VoteCastEventFilter;
    VoteCast(
      proposalId?: BigNumberish | null,
      voter?: string | null,
      support?: null,
      votes?: null
    ): VoteCastEventFilter;
  };

  estimateGas: {
    cancelProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createProposal(
      title: string,
      description: string,
      category: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    executeProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createProposal(
      title: string,
      description: string,
      category: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    executeProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
